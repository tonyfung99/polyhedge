{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/HedgeExecutor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { ReentrancyGuard } from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n// GMX V2 Interfaces\ninterface IGMXExchangeRouter {\n    function createOrder(\n        address account,\n        address[] calldata addressItems,\n        uint256[] calldata uintItems,\n        bytes32[] calldata bytesDataItems,\n        bytes calldata data\n    ) external payable returns (bytes32);\n}\n\ninterface IGMXRouter {\n    function approvePlugin(address plugin) external;\n\n    function plugin() external view returns (address);\n}\n\ninterface IGMXOrderHandler {\n    function executeOrder(bytes32 key, address keeper) external;\n}\n\n/**\n * @title HedgeExecutor\n * @notice Executes hedge orders on GMX (Arbitrum).\n *         Receives cross-chain messages from StrategyManager (Polygon) via LayerZero.\n *         Places perpetual orders directly on GMX on-chain.\n */\ncontract HedgeExecutor is Ownable, ReentrancyGuard {\n    struct HedgeOrder {\n        uint256 strategyId;\n        address user;\n        string asset; // e.g., \"BTC\", \"ETH\"\n        bool isLong;\n        uint256 amount; // USDC amount\n        uint256 maxSlippageBps;\n        bool executed;\n        bytes32 gmxOrderKey;\n    }\n\n    // strategyId => HedgeOrder\n    mapping(uint256 => HedgeOrder) public hedgeOrders;\n    mapping(uint256 => bool) public ordersClosed;\n    mapping(bytes32 => uint256) public gmxKeyToStrategyId; // GMX order key => strategy ID\n\n    event HedgeOrderCreated(\n        uint256 indexed strategyId,\n        address indexed user,\n        string asset,\n        bool isLong,\n        uint256 amount,\n        bytes32 gmxOrderKey\n    );\n    event HedgeOrderClosed(uint256 indexed strategyId, uint256 realizedPnL);\n    event MessageReceived(uint256 indexed strategyId, address indexed user);\n    event HedgeOrderExecuted(uint256 indexed strategyId, bytes32 gmxOrderKey);\n\n    address public strategyManager;\n\n    // GMX contracts on Arbitrum\n    IGMXExchangeRouter public gmxExchangeRouter;\n    IGMXRouter public gmxRouter;\n    IERC20 public usdc;\n\n    // Market addresses for GMX (index token to market address mapping)\n    mapping(string => address) public assetMarkets;\n\n    constructor(address _gmxExchangeRouter, address _gmxRouter, address _usdc) Ownable(msg.sender) {\n        require(_gmxExchangeRouter != address(0), \"invalid GMX router\");\n        require(_gmxRouter != address(0), \"invalid GMX router\");\n        require(_usdc != address(0), \"invalid USDC\");\n\n        gmxExchangeRouter = IGMXExchangeRouter(_gmxExchangeRouter);\n        gmxRouter = IGMXRouter(_gmxRouter);\n        usdc = IERC20(_usdc);\n    }\n\n    /**\n     * @notice Set StrategyManager address (can only be called once by owner)\n     */\n    function setStrategyManager(address _strategyManager) external onlyOwner {\n        require(_strategyManager != address(0), \"invalid address\");\n        require(strategyManager == address(0), \"already set\");\n        strategyManager = _strategyManager;\n    }\n\n    /**\n     * @notice Configure market addresses for assets\n     *         Maps asset symbols (e.g., \"BTC\", \"ETH\") to GMX market addresses\n     */\n    function setAssetMarket(string calldata asset, address marketAddress) external onlyOwner {\n        require(marketAddress != address(0), \"invalid market\");\n        assetMarkets[asset] = marketAddress;\n    }\n\n    /**\n     * @notice Receive hedge order from StrategyManager and execute it on GMX\n     *         Can only be called by StrategyManager\n     */\n    function createHedgeOrder(\n        uint256 strategyId,\n        address user,\n        string calldata asset,\n        bool isLong,\n        uint256 amount,\n        uint256 maxSlippageBps\n    ) external nonReentrant {\n        require(msg.sender == strategyManager, \"only StrategyManager\");\n        require(amount > 0, \"amount=0\");\n        require(assetMarkets[asset] != address(0), \"asset not supported\");\n\n        // Check USDC balance and allowance\n        require(usdc.balanceOf(address(this)) >= amount, \"insufficient USDC balance\");\n\n        // Create the GMX order\n        bytes32 gmxOrderKey = _executeGMXOrder(asset, isLong, amount, maxSlippageBps);\n\n        // Store hedge order details\n        hedgeOrders[strategyId] = HedgeOrder({\n            strategyId: strategyId,\n            user: user,\n            asset: asset,\n            isLong: isLong,\n            amount: amount,\n            maxSlippageBps: maxSlippageBps,\n            executed: true,\n            gmxOrderKey: gmxOrderKey\n        });\n\n        // Map GMX order key back to strategy for settlement\n        gmxKeyToStrategyId[gmxOrderKey] = strategyId;\n\n        emit HedgeOrderCreated(strategyId, user, asset, isLong, amount, gmxOrderKey);\n        emit MessageReceived(strategyId, user);\n        emit HedgeOrderExecuted(strategyId, gmxOrderKey);\n    }\n\n    /**\n     * @notice Internal function to execute a GMX perpetual order\n     *         Constructs the necessary parameters and calls GMXExchangeRouter\n     */\n    function _executeGMXOrder(\n        string calldata asset,\n        bool isLong,\n        uint256 amount,\n        uint256 maxSlippageBps\n    ) internal returns (bytes32 orderKey) {\n        address marketAddress = assetMarkets[asset];\n\n        // Approve GMX to spend USDC\n        usdc.approve(address(gmxRouter), amount);\n\n        // Build order parameters for GMX V2\n        // This is a simplified version - adjust based on actual GMX V2 order structure\n        address[] memory addressItems = new address[](4);\n        addressItems[0] = marketAddress; // market\n        addressItems[1] = msg.sender; // receiver (StrategyManager)\n        addressItems[2] = address(usdc); // initialCollateralToken\n        addressItems[3] = address(0); // swapPath (none for direct orders)\n\n        uint256[] memory uintItems = new uint256[](6);\n        uintItems[0] = amount; // sizeDeltaUsd (in USDC value)\n        uintItems[1] = amount; // initialCollateralDeltaAmount\n        uintItems[2] = 0; // triggerPrice\n        uintItems[3] = maxSlippageBps; // acceptablePrice / slippage\n        uintItems[4] = 0; // executionFee (handled separately)\n        uintItems[5] = isLong ? 1 : 0; // orderType (1 = MarketIncrease for longs)\n\n        bytes32[] memory bytesDataItems = new bytes32[](0);\n\n        // Create order via GMX ExchangeRouter\n        orderKey = gmxExchangeRouter.createOrder(address(this), addressItems, uintItems, bytesDataItems, \"\");\n\n        return orderKey;\n    }\n\n    /**\n     * @notice Close hedge order at maturity\n     *         Called by backend/bridge when strategy matures.\n     *         Submits a close/reduce order to GMX\n     */\n    function closeHedgeOrder(uint256 strategyId, int256 realizedPnL) external nonReentrant onlyOwner {\n        require(!ordersClosed[strategyId], \"already closed\");\n\n        HedgeOrder storage hedge = hedgeOrders[strategyId];\n        require(hedge.amount > 0, \"order not found\");\n\n        // TODO: Call GMX.closePosition() via ExchangeRouter\n        // For now, mark as closed\n        ordersClosed[strategyId] = true;\n        emit HedgeOrderClosed(strategyId, uint256(realizedPnL));\n    }\n\n    /**\n     * @notice Get hedge order details\n     */\n    function getHedgeOrder(uint256 strategyId) external view returns (HedgeOrder memory) {\n        return hedgeOrders[strategyId];\n    }\n\n    /**\n     * @notice Get strategy ID from GMX order key (for settlement tracking)\n     */\n    function getStrategyIdFromGMXOrder(bytes32 gmxOrderKey) external view returns (uint256) {\n        return gmxKeyToStrategyId[gmxOrderKey];\n    }\n\n    /**\n     * @notice Check if a hedge order has been executed\n     */\n    function isOrderExecuted(uint256 strategyId) external view returns (bool) {\n        return hedgeOrders[strategyId].executed;\n    }\n\n    /**\n     * @notice Emergency withdrawal of USDC (owner only)\n     */\n    function withdrawUSDC(uint256 amount) external onlyOwner {\n        require(usdc.transfer(msg.sender, amount), \"transfer failed\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}