{
  "address": "0xc707d360BEc8048760F028f852cF1E244d155710",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hedgeExecutor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "OrdersExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutAmount",
          "type": "uint256"
        }
      ],
      "name": "StrategyClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityTs",
          "type": "uint256"
        }
      ],
      "name": "StrategyCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "grossAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "netAmount",
          "type": "uint256"
        }
      ],
      "name": "StrategyPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutPerUSDC",
          "type": "uint256"
        }
      ],
      "name": "StrategySettled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "grossAmount",
          "type": "uint256"
        }
      ],
      "name": "buyStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        }
      ],
      "name": "claimStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "feeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityTs",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketId",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isYes",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriceBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct StrategyManager.PolymarketOrder[]",
          "name": "pmOrders",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "dex",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "asset",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippageBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct StrategyManager.HedgeOrder[]",
          "name": "hedgeOrders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "expectedProfitBps",
          "type": "uint256"
        }
      ],
      "name": "createStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hedgeExecutor",
      "outputs": [
        {
          "internalType": "contract IHedgeExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextStrategyId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "reportExecutionStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payoutPerUSDC",
          "type": "uint256"
        }
      ],
      "name": "settleStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "feeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityTs",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "marketId",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "isYes",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriceBps",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StrategyManager.PolymarketOrder[]",
              "name": "polymarketOrders",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "dex",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "asset",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "isLong",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxSlippageBps",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StrategyManager.HedgeOrder[]",
              "name": "hedgeOrders",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "expectedProfitBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct StrategyManager.StrategyDetails",
          "name": "details",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "payoutPerUSDC",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "strategyId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchaseTs",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd89f93b56e26dc1a48d2c086c0b092737d3b4d9293829732fe21ffe8f7a85c85",
  "receipt": {
    "to": null,
    "from": "0x00F3504c3714B641d3d6badE01956214A2B2e533",
    "contractAddress": "0xc707d360BEc8048760F028f852cF1E244d155710",
    "transactionIndex": 3,
    "gasUsed": "1682057",
    "logsBloom": "0x
    "blockHash": "0xf2ac15daeaf8400a9e5e63b54d9e7a9782594fb31d1b2a247e424809e4df6197",
    "transactionHash": "0xd89f93b56e26dc1a48d2c086c0b092737d3b4d9293829732fe21ffe8f7a85c85",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 208617192,
        "transactionHash": "0xd89f93b56e26dc1a48d2c086c0b092737d3b4d9293829732fe21ffe8f7a85c85",
        "address": "0xc707d360BEc8048760F028f852cF1E244d155710",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000000f3504c3714b641d3d6bade01956214a2b2e533"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xf2ac15daeaf8400a9e5e63b54d9e7a9782594fb31d1b2a247e424809e4df6197"
      }
    ],
    "blockNumber": 208617192,
    "cumulativeGasUsed": "1999011",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf88d065e77c8cC2239327C5EDb3A432268e5831",
    "0x67b059F3f838Ce25896635AcEd41a2ba5f175446"
  ],
  "numDeployments": 1,
  "solcInputHash": "54d3ca73bb95b8e1c47a388e10e0cd2e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hedgeExecutor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"OrdersExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutAmount\",\"type\":\"uint256\"}],\"name\":\"StrategyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"}],\"name\":\"StrategyCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"grossAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netAmount\",\"type\":\"uint256\"}],\"name\":\"StrategyPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutPerUSDC\",\"type\":\"uint256\"}],\"name\":\"StrategySettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"grossAmount\",\"type\":\"uint256\"}],\"name\":\"buyStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"name\":\"claimStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceBps\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyManager.PolymarketOrder[]\",\"name\":\"pmOrders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dex\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippageBps\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyManager.HedgeOrder[]\",\"name\":\"hedgeOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expectedProfitBps\",\"type\":\"uint256\"}],\"name\":\"createStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hedgeExecutor\",\"outputs\":[{\"internalType\":\"contract IHedgeExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStrategyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"reportExecutionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutPerUSDC\",\"type\":\"uint256\"}],\"name\":\"settleStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketId\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriceBps\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyManager.PolymarketOrder[]\",\"name\":\"polymarketOrders\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"dex\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"asset\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippageBps\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyManager.HedgeOrder[]\",\"name\":\"hedgeOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expectedProfitBps\",\"type\":\"uint256\"}],\"internalType\":\"struct StrategyManager.StrategyDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"payoutPerUSDC\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTs\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"StrategyManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"settleStrategy(uint256,uint256)\":{\"notice\":\"Settle a strategy with a global payout-per-USDC factor after all legs are closed off-chain\"}},\"notice\":\"Minimal contract to create, sell, and settle hedging strategies.         Designed to unblock frontend and bot integrations. Execution of         off-chain orders (Polymarket/DEX) is coordinated by an external         bridge/backend listening to emitted events.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyManager.sol\":\"StrategyManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/StrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// Interface to HedgeExecutor on the same chain\\ninterface IHedgeExecutor {\\n    function createHedgeOrder(\\n        uint256 strategyId,\\n        address user,\\n        string calldata asset,\\n        bool isLong,\\n        uint256 amount,\\n        uint256 maxSlippageBps\\n    ) external;\\n}\\n\\n/**\\n * @title StrategyManager\\n * @notice Minimal contract to create, sell, and settle hedging strategies.\\n *         Designed to unblock frontend and bot integrations. Execution of\\n *         off-chain orders (Polymarket/DEX) is coordinated by an external\\n *         bridge/backend listening to emitted events.\\n */\\ncontract StrategyManager is Ownable, ReentrancyGuard {\\n    struct PolymarketOrder {\\n        string marketId; // external id reference\\n        bool isYes; // YES/NO side\\n        uint256 amount; // quote amount denominated in USDC (6 decimals)\\n        uint256 maxPriceBps; // max price in basis points of 1e4 (e.g. 500 = 5.00%)\\n    }\\n\\n    struct HedgeOrder {\\n        string dex; // e.g. GMX / Hyperliquid / Gains\\n        string asset; // e.g. BTC, ETH\\n        bool isLong; // long/short\\n        uint256 amount; // quote amount denominated in USDC (6 decimals)\\n        uint256 maxSlippageBps; // basis points\\n    }\\n\\n    struct StrategyDetails {\\n        PolymarketOrder[] polymarketOrders;\\n        HedgeOrder[] hedgeOrders;\\n        uint256 expectedProfitBps; // expected net profit in bps\\n    }\\n\\n    struct Strategy {\\n        uint256 id;\\n        string name;\\n        uint256 feeBps; // platform fee in bps\\n        uint256 maturityTs; // unix timestamp\\n        bool active;\\n        StrategyDetails details;\\n        // settlement\\n        bool settled;\\n        uint256 payoutPerUSDC; // 6 decimals, e.g. 1.08e6 means 1.08 USDC per 1 USDC net\\n    }\\n\\n    struct UserPosition {\\n        uint256 strategyId;\\n        uint256 amount; // net principal in USDC (after fee)\\n        uint256 purchaseTs;\\n        bool claimed;\\n    }\\n\\n    IERC20 public immutable usdc;\\n    uint256 public nextStrategyId = 1;\\n\\n    // strategyId => Strategy\\n    mapping(uint256 => Strategy) public strategies;\\n    // user => positions\\n    mapping(address => UserPosition[]) public userPositions;\\n\\n    // HedgeExecutor on same chain (Arbitrum)\\n    IHedgeExecutor public hedgeExecutor;\\n\\n    // Events used by the bridge/backend to coordinate off-chain execution\\n    event StrategyCreated(uint256 indexed strategyId, string name, uint256 maturityTs);\\n    event StrategyPurchased(\\n        uint256 indexed strategyId,\\n        address indexed user,\\n        uint256 grossAmount,\\n        uint256 netAmount // Amount to bridge to Polygon for Polymarket\\n    );\\n    event OrdersExecuted(uint256 indexed strategyId, address indexed user, bool success);\\n    event StrategyClaimed(uint256 indexed strategyId, address indexed user, uint256 payoutAmount);\\n    event StrategySettled(uint256 indexed strategyId, uint256 payoutPerUSDC);\\n\\n    constructor(address _usdc, address _hedgeExecutor) Ownable(msg.sender) {\\n        require(_usdc != address(0), \\\"USDC address required\\\");\\n        require(_hedgeExecutor != address(0), \\\"HedgeExecutor address required\\\");\\n        usdc = IERC20(_usdc);\\n        hedgeExecutor = IHedgeExecutor(_hedgeExecutor);\\n    }\\n\\n    // ------------------\\n    // Admin/Bot functions\\n    // ------------------\\n\\n    function createStrategy(\\n        string calldata name,\\n        uint256 feeBps,\\n        uint256 maturityTs,\\n        PolymarketOrder[] calldata pmOrders,\\n        HedgeOrder[] calldata hedgeOrders,\\n        uint256 expectedProfitBps\\n    ) external onlyOwner returns (uint256 strategyId) {\\n        require(maturityTs > block.timestamp, \\\"maturity must be future\\\");\\n        require(feeBps <= 2000, \\\"fee too high\\\"); // <=20%\\n\\n        strategyId = nextStrategyId++;\\n\\n        // Copy arrays into storage\\n        Strategy storage s = strategies[strategyId];\\n        s.id = strategyId;\\n        s.name = name;\\n        s.feeBps = feeBps;\\n        s.maturityTs = maturityTs;\\n        s.active = true;\\n        s.details.expectedProfitBps = expectedProfitBps;\\n        s.settled = false;\\n        s.payoutPerUSDC = 0;\\n\\n        for (uint256 i = 0; i < pmOrders.length; i++) {\\n            s.details.polymarketOrders.push(pmOrders[i]);\\n        }\\n        for (uint256 j = 0; j < hedgeOrders.length; j++) {\\n            s.details.hedgeOrders.push(hedgeOrders[j]);\\n        }\\n\\n        emit StrategyCreated(strategyId, name, maturityTs);\\n    }\\n\\n    // ------------------\\n    // User functions\\n    // ------------------\\n\\n    function buyStrategy(uint256 strategyId, uint256 grossAmount) external nonReentrant {\\n        Strategy storage s = strategies[strategyId];\\n        require(s.active, \\\"strategy inactive\\\");\\n        require(!s.settled, \\\"strategy settled\\\");\\n        require(block.timestamp < s.maturityTs, \\\"strategy matured\\\");\\n        require(grossAmount > 0, \\\"amount=0\\\");\\n\\n        // pull funds\\n        require(usdc.transferFrom(msg.sender, address(this), grossAmount), \\\"USDC transfer failed\\\");\\n\\n        // fee and net calculation\\n        uint256 feeAmount = (grossAmount * s.feeBps) / 10_000;\\n        uint256 netAmount = grossAmount - feeAmount;\\n\\n        // record user position\\n        userPositions[msg.sender].push(\\n            UserPosition({ strategyId: strategyId, amount: netAmount, purchaseTs: block.timestamp, claimed: false })\\n        );\\n\\n        emit StrategyPurchased(strategyId, msg.sender, grossAmount, netAmount);\\n\\n        // Trigger hedge orders on HedgeExecutor (same chain)\\n        for (uint256 i = 0; i < s.details.hedgeOrders.length; i++) {\\n            HedgeOrder storage ho = s.details.hedgeOrders[i];\\n            hedgeExecutor.createHedgeOrder(strategyId, msg.sender, ho.asset, ho.isLong, ho.amount, ho.maxSlippageBps);\\n        }\\n    }\\n\\n    function claimStrategy(uint256 strategyId) external nonReentrant {\\n        Strategy storage s = strategies[strategyId];\\n        require(block.timestamp >= s.maturityTs, \\\"not matured\\\");\\n        require(s.settled, \\\"not settled\\\");\\n        require(s.payoutPerUSDC > 0, \\\"payout unset\\\");\\n\\n        // find unclaimed position (simple linear scan for MVP)\\n        UserPosition[] storage positions = userPositions[msg.sender];\\n        uint256 idx = type(uint256).max;\\n        for (uint256 i = 0; i < positions.length; i++) {\\n            if (positions[i].strategyId == strategyId && !positions[i].claimed) {\\n                idx = i;\\n                break;\\n            }\\n        }\\n        require(idx != type(uint256).max, \\\"no position\\\");\\n\\n        UserPosition storage p = positions[idx];\\n        p.claimed = true;\\n\\n        // Payout is proportional to contributed net amount times settlement factor\\n        uint256 payout = (p.amount * s.payoutPerUSDC) / 1_000_000; // 6 decimals\\n        require(usdc.transfer(msg.sender, payout), \\\"USDC payout failed\\\");\\n\\n        emit StrategyClaimed(strategyId, msg.sender, payout);\\n    }\\n\\n    // ------------------\\n    // Bridge/Executor hooks (owner for MVP)\\n    // ------------------\\n    function reportExecutionStatus(uint256 strategyId, address user, bool success) external onlyOwner {\\n        emit OrdersExecuted(strategyId, user, success);\\n    }\\n\\n    /// @notice Settle a strategy with a global payout-per-USDC factor after all legs are closed off-chain\\n    function settleStrategy(uint256 strategyId, uint256 payoutPerUSDC) external onlyOwner {\\n        Strategy storage s = strategies[strategyId];\\n        require(block.timestamp >= s.maturityTs, \\\"not matured\\\");\\n        require(!s.settled, \\\"already settled\\\");\\n        require(payoutPerUSDC > 0, \\\"invalid payout\\\");\\n        s.settled = true;\\n        s.payoutPerUSDC = payoutPerUSDC; // 6 decimals\\n        // deactivate further buys just in case\\n        s.active = false;\\n        emit StrategySettled(strategyId, payoutPerUSDC);\\n    }\\n}\\n\",\"keccak256\":\"0xdaf9cbd623969b3ebcbbbcf65f1709760ededd1b866a16ff53c92dbf6be5bea3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "StrategyManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "settleStrategy(uint256,uint256)": {
        "notice": "Settle a strategy with a global payout-per-USDC factor after all legs are closed off-chain"
      }
    },
    "notice": "Minimal contract to create, sell, and settle hedging strategies.         Designed to unblock frontend and bot integrations. Execution of         off-chain orders (Polymarket/DEX) is coordinated by an external         bridge/backend listening to emitted events.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 266,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1036,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "nextStrategyId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1041,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "strategies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Strategy)1021_storage)"
      },
      {
        "astId": 1047,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "userPositions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_struct(UserPosition)1030_storage)dyn_storage)"
      },
      {
        "astId": 1050,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "hedgeExecutor",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IHedgeExecutor)967"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(HedgeOrder)992_storage)dyn_storage": {
        "base": "t_struct(HedgeOrder)992_storage",
        "encoding": "dynamic_array",
        "label": "struct StrategyManager.HedgeOrder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PolymarketOrder)981_storage)dyn_storage": {
        "base": "t_struct(PolymarketOrder)981_storage",
        "encoding": "dynamic_array",
        "label": "struct StrategyManager.PolymarketOrder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(UserPosition)1030_storage)dyn_storage": {
        "base": "t_struct(UserPosition)1030_storage",
        "encoding": "dynamic_array",
        "label": "struct StrategyManager.UserPosition[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IHedgeExecutor)967": {
        "encoding": "inplace",
        "label": "contract IHedgeExecutor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(UserPosition)1030_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StrategyManager.UserPosition[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserPosition)1030_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Strategy)1021_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StrategyManager.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)1021_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HedgeOrder)992_storage": {
        "encoding": "inplace",
        "label": "struct StrategyManager.HedgeOrder",
        "members": [
          {
            "astId": 983,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "dex",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 985,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "asset",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 987,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "isLong",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 989,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 991,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "maxSlippageBps",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(PolymarketOrder)981_storage": {
        "encoding": "inplace",
        "label": "struct StrategyManager.PolymarketOrder",
        "members": [
          {
            "astId": 974,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "marketId",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 976,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "isYes",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 978,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 980,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "maxPriceBps",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Strategy)1021_storage": {
        "encoding": "inplace",
        "label": "struct StrategyManager.Strategy",
        "members": [
          {
            "astId": 1005,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1007,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1009,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "feeBps",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1011,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "maturityTs",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1013,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "active",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1016,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "details",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(StrategyDetails)1003_storage"
          },
          {
            "astId": 1018,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "settled",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 1020,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "payoutPerUSDC",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(StrategyDetails)1003_storage": {
        "encoding": "inplace",
        "label": "struct StrategyManager.StrategyDetails",
        "members": [
          {
            "astId": 996,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "polymarketOrders",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(PolymarketOrder)981_storage)dyn_storage"
          },
          {
            "astId": 1000,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "hedgeOrders",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(HedgeOrder)992_storage)dyn_storage"
          },
          {
            "astId": 1002,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "expectedProfitBps",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserPosition)1030_storage": {
        "encoding": "inplace",
        "label": "struct StrategyManager.UserPosition",
        "members": [
          {
            "astId": 1023,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "strategyId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1025,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1027,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "purchaseTs",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1029,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "claimed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}